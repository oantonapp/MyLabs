#!/bin/bash

#
# log_enable
# Enable and start logging
# @use log_enable
# @return void
#

function log_enable
{
#	vm_log=()
	log_message ""
	log_message "Starting VM Backup"
	log_message "------------------------------------------"
}


#
# log_message
# Add message to the log
# @use log_message "message"
# @param string	Message
# @return void
#

function log_message
{
	`echo "[$(date +%Y-%m-%d_%H-%M-%S)] $1" &>>$log_path`
}


#
# add_to_backup_list
# Add a new VM to the backup list
# @use add_to_backup_list "uuid"
# @param string	VM uuid
# @return void
#

function add_to_backup_list
{
	log_message "Add to backup list: $1"
	vm_backup_list[${#vm_backup_list[@]}]=$1
#echo vm_backup_list[${#vm_backup_list[@]}]=$1
}


#
# reset_backup_list
# Remove all VMs from the backup list
# @use reset_backup_list
# @return void
#

function reset_backup_list
{
	log_message "Reset backup list"
	vm_backup_list=()
}


#
# get_running_vms
# Return array of running VM uuids
# @use get_running_vms
# @return array
#

function get_running_vms
{
	log_message "Get running VMs"
	echo=`xe vm-list power-state=running is-control-domain=false 2>>$log_path`
	
	if [ $? -ne 0 ]; then
		return 1
	fi
	
	echo "$echo" | grep "uuid" | awk '{print $NF}'
	return 0
}


#
# set_running_vms
# Set running VMs in backup list
# @use set_running_vms
# @return void
#

function set_running_vms
{
	log_message "Set running VMs"
	reset_backup_list
	running_vms=`get_running_vms`
	if [ $? -ne 0 ]; then
		log_message "get_running_vms failed: $running_vms"
		return 1
	fi
	
	for uuid in $running_vms; do
		add_to_backup_list $uuid
	done
	return 0
}


#
# get_all_vms
# Return array of all VM uuids
# @use get_all_vms
# @return array
#

function get_all_vms
{
	log_message "Get all VMs"
	echo=`xe vm-list is-control-domain=false 2>>$log_path`
	
	if [ $? -ne 0 ]; then
		return 1
	fi
	
	echo "$echo" | grep "uuid" | awk '{print $NF}'
	return 0
}


#
# set_all_vms
# Set all VMs in backup list
# @use set_all_vms
# @return void
#

function set_all_vms
{
	log_message "Set all VMs"
	reset_backup_list
	
	all_vms=`get_all_vms`
	
	if [ $? -ne 0 ]; then
		log_message "get_all_vms failed: $all_vms"
		return 1
	fi
	
	for uuid in $all_vms; do
		add_to_backup_list $uuid
	done
	
	return 0
}


#
# backup_vm_list
# Backup VMs in vm_backup_list
# @use backup_vm_list
# @return void
#

function backup_vm_list
{
	log_message "Initialise backup of VM list"
	
	for uuid in ${vm_backup_list[@]}; do
	
		backup_vm $uuid
		if [ $? -ne 0 ]; then
			log_message "VM $uuid backup failed"
		else
			log_message "VM $uuid backup succeeded"
		fi
	done
}

#
# backup_vm
# Backup a VM
# @use backup_vm "uuid"
# @param string	uuid
# @return void
#

function backup_vm
{
	log_message "Backup VM $1"
	
	vm_label=`get_vm_label $1`
	
	if [ $? -ne 0 ]; then
		log_message "get_vm_label failed: $vm_label"
		return 1
	else
		log_message "get_vm_label succeeded: $vm_label"
	fi
	
	snapshot_name=$vm_label"_snapshot"
	export_name=$vm_label"-"$date".xva"
	
	snapshot=`snapshot_vm $1 $snapshot_name`
	
	if [ $? -ne 0 ]; then
		log_message "snapshot_vm failed: $snapshot"
		return 2
	else
		log_message "snapshot_vm succeeded: $snapshot"
	fi
	
	remove_template_result=`remove_template $snapshot`
	
	if [ $? -ne 0 ]; then
		log_message "remove_template failed: $remove_template_result"
		return 3
	else
		log_message "remove_template succeeded: $remove_template_result"
	fi
	
	disable_ha_result=`disable_ha $snapshot`
	
	if [ $? -ne 0 ]; then
		log_message "disable_ha failed: $disable_ha_result"
		return 4
	else
		log_message "disable_ha succeeded: $disable_ha_result"
	fi
	
	export_vm_result=`export_vm $snapshot $export_name`
	
	if [ $? -ne 0 ]; then
		log_message "export_vm failed: $export_vm_result"
		return 5
	else
		log_message "export_vm succeeded: $export_vm_result"
	fi
	
	delete_vm_result=`delete_vm $snapshot`
	
	if [ $? -ne 0 ]; then
		log_message "delete_vm failed: $delete_vm_result"
		return 6
	else
		log_message "delete_vm succeeded: $delete_vm_result"
	fi
	
	return 0
}


#
# get_vm_label
# Return a VM label
# @use get_vm_label "uuid"
# @param string	uuid
# @return string
#

function get_vm_label
{
	log_message "Get VM label $1"
	echo=`xe vm-param-get param-name=name-label uuid=$1 2>>$log_path`
	
	if [ $? -ne 0 ]; then
		return 1
	fi
	
	echo "$echo" | tr ' ' _ | tr -d '(' | tr -d ')'
	return 0
}


#
# get_vm_vdi
# Return a VM VDI uuid
# @use get_vm_vdi "uuid"
# @param string	uuid
# @return string
#

function get_vm_vdi
{
	log_message "Get VDI $1"
	vm_vbds=`get_vm_vbds $1`
	
	if [ $? -ne 0 ]; then
		log_message "get_vm_vbds failed: $vm_vbds"
		return 1
	fi
	
	vdi_uuids=()
	
	for uuid in $vm_vbds; do
	
		log_message "VBD $uuid"
		vbd_type=`get_vbd_type $uuid`
		
		if [ $? -ne 0 ]; then
			log_message "get_vbd_type failed: $vbd_type"
			break
		fi
		
		if [ $vbd_type != "CD" ]; then
			
			vdi_uuid=`get_vbd_vdi_list $uuid`
			
			if [ $? -ne 0 ]; then
				log_message "get_vbd_vdi_list failed: $vdi_uuid"
				break
			else
				log_message "VDI: $vdi_uuid"
			fi
			
			vdi_snapshot=`check_vdi_is_snapshot $vdi_uuid`
			
			if [ $? -ne 0 ]; then
				log_message "check_vdi_is_snapshot failed: $vdi_snapshot"
				break
			fi
			
			log_message "Add VDI to deletion list: $vdi_uuid"
			
			vdi_uuids[${#vdi_uuids[@]}]=$vdi_uuid
			
		else
			log_message "VDI is a CD, skipping: $uuid"
		fi
		
	done
	
	echo ${vdi_uuids[@]}
	return 0
}


#
# get_vm_vbds
# Return a VM VBD uuid list
# @use get_vm_vbd "uuid"
# @param string	uuid
# @return array
#

function get_vm_vbds
{
	log_message "Get VBD $1"
	echo=`xe vbd-list vm-uuid=$1 2>>$log_path`
	
	if [ $? -ne 0 ]; then
		return 1
	fi
	
	echo "$echo" | grep ^uuid | awk '{print $NF}'
	return 0
}


#
# get_vbd_type
# Return VBD type
# @use get_vbd_type "uuid"
# @param string	uuid
# @return string
#

function get_vbd_type
{
	log_message "Get VBD type $1"
	echo=`xe vbd-param-get param-name=type uuid=$1 2>>$log_path`
	
	if [ $? -ne 0 ]; then
		return 1
	fi
	
	echo "$echo"
	return 0
}


#
# get_vbd_vdi_list
# Return VDI uuids for VBD
# @use get_vbd_vdi_list "uuid"
# @param string	uuid
# @return array
#

function get_vbd_vdi_list
{
	log_message "Get VBD VDI list $1"
	echo=`xe vdi-list vbd-uuids=$1 2>>$log_path`
	
	if [ $? -ne 0 ]; then
		return 1
	fi
	
	echo "$echo" | grep ^uuid | awk '{print $NF}'
	return 0
}


#
# check_vdi_is_snapshot
# Check a VDI is for a snapshot
# @use check_vdi_is_snapshot "uuid"
# @param string	uuid
# @return boolean
#

function check_vdi_is_snapshot
{
	log_message "Check VDI is a snapshot $1"
	echo=`xe vdi-param-get param-name=is-a-snapshot uuid=$1 2>>$log_path`
	
	if [ $? -ne 0 ]; then
		return 1
	fi
	
	echo "$echo"
	return 0
}


#
# snapshot_vm
# Snapshot a VM with quiesce if possible
# @use snapshot_vm "uuid"
# @param string	uuid
# @param string	label
# @return boolean
#

function snapshot_vm
{
	log_message "Snapshotting VM $1"
	snapshot_uuid=`snapshot_vm_quiesce $1 $2`
	
	if [ $? -ne 0 ]; then
		log_message "Quiesce snapshot failed: $snapshot_uuid"
		log_message "Attempting normal snapshot"
		snapshot_uuid=`snapshot_vm_normal $1 $2`
		
		if [ $? -ne 0 ]; then
			log_message "Normal snapshot failed: $snapshot_uuid"
			return 1
		fi
		
	fi
	
	echo $snapshot_uuid
	return 0
}


#
# snapshot_vm_normal
# Snapshot a VM
# @use snapshot_vm_normal "uuid" "label"
# @param string	uuid
# @param string	label
# @return boolean
#

function snapshot_vm_normal
{
	log_message "Snapshot $1 as $2"
	echo=`xe vm-snapshot vm=$1 new-name-label=$2 2>>$log_path`
	
	if [ $? -ne 0 ]; then
		return 1
	fi
	
	echo "$echo"
	return 0
}


#
# snapshot_vm_quiesce
# Snapshot a VM with quiesce
# @use snapshot_vm_quiesce "uuid" "label"
# @param string	uuid
# @param string	label
# @return boolean
#

function snapshot_vm_quiesce
{
	log_message "Snapshot with quiesce $1 as $2"
	echo=`xe vm-snapshot-with-quiesce vm=$1 new-name-label=$2 2>>$log_path`
	
	if [ $? -ne 0 ]; then
		return 1
	fi
	
	echo "$echo"
	return 0
}


#
# export_vm
# Export a VM to a destination file
# @use export_vm "uuid" "filename.xva"
# @param string	uuid
# @param string	filename
# @return boolean
#

function export_vm
{
	log_message "Export VM $1 as $2"
	echo=`xe vm-export vm=$1 filename="$backup_dir/$2" 2>>$log_path`
	
	if [ $? -ne 0 ]; then
		return 1
	fi
	
	echo "$echo"
	return 0
}


#
# disable_ha
# Disable high availability
# @use disable_ha "uuid"
# @param string	uuid
# @return boolean
#

function disable_ha
{
	log_message "Disable HA $1"
	echo=`xe template-param-set ha-always-run=false uuid=$1 2>>$log_path`
	
	if [ $? -ne 0 ]; then
		return 1
	fi
	
	echo "$echo"
	return 0
}


#
# remove_template
# Remove template param from VM
# @use remove_template "uuid"
# @param string	uuid
# @return boolean
#

function remove_template
{
	log_message "Remove template status $1"
	echo=`xe template-param-set is-a-template=false uuid=$1 2>>$log_path`
	
	if [ $? -ne 0 ]; then
		return 1
	fi
	
	echo "$echo"
	return 0
}


#
# delete_vm
# Delete a VM
# @use delete_vm "uuid"
# @param string	uuid
# @return boolean
#

function delete_vm
{
	log_message "Delete VM $1"
	
	vdi_uuid=`get_vm_vdi $1`
	
	if [ $? = 0 ] && [ ${#vdi_uuid[@]} > 0 ]; then
		
		for uuid in $vdi_uuid; do
		
			destroy_vdi_result=`destroy_vdi $uuid`

			if [ $? -ne 0 ]; then
					log_message "Cannot destroy: $vdi_uuid"
			else
					log_message "VDI destroyed: $vdi_uuid"
			fi
			
		done
		
	else
	
			log_message "Cannot get VDI uuid: $vdi_uuid"

	fi
	
	vm_uninstall_result=`uninstall_vm $1`
	
	if [ $? -ne 0 ]; then
		log_message "Cannot uninstall VM: $vm_uninstall_result"
		return 1
	fi
	
	return 0
	
}


#
# uninstall_vm
# Uninstall (remove) a VM
# @use uninstall_vm "uuid"
# @param string	uuid
# @return boolean
#

function uninstall_vm
{
	log_message "Uninstall VM $1"
	echo=`xe vm-uninstall force=true uuid=$1 2>>$log_path`
	
	if [ $? -ne 0 ]; then
		return 1
	fi
	
	echo "$echo"
	return 0
}


#
# destroy_vdi
# Destroy a VDI
# @use destroy_vdi "uuid"
# @param string	uuid
# @return boolean
#

function destroy_vdi
{
	log_message "Destroy VDI $1"
	echo=`xe vdi-destroy uuid=$1 2>>$log_path`
	
	if [ $? -ne 0 ]; then
		return 1
	fi
	
	echo "$echo"
	return 0
}
######################################################################################################

function create_backup_folder
{
        backup_dir="$backup_directory/$HOSTNAME/$year/$mon/$day"
        mkdir -p $backup_dir 2> log_message
}

function check_backup_cifs
{
        mount_san=$(df -h | grep -c $backup_directory)
        if [ "$mount_san" -eq 0 ] ; then
#               logger Storage mount ERROR -p user.error -t `basename "$0"`
#echo "Storage mount ERROR"
                log_message "Storage mount ERROR"
                exit 1
        fi
}

function add_to_backup_list_tag
 {
        create_backup_folder
#echo "function add_to_backup_list_tag"
	if [ $used_pool == true ]; then
		pool_param="pool"
	else
		pool_param="host"
	fi

        pool=$(xe $pool_param-list params=uuid --minimal 2> /dev/null)
#        backup=$(xe pool-param-get uuid=${pool} param-name=other-config param-key=$backup_tag 2> /dev/null)
        pool_tags=$(xe $pool_param-param-get uuid=${pool} param-name=tags 2> /dev/null)
        if [ $? -eq 0 ] && ([[ ${pool_tags} == *$backup_tag* ]]); then
           VDS_UUID_ARRAY=`xe vm-list | grep uuid | awk '{ print $5 }'`
           for f in $VDS_UUID_ARRAY
                do
			vm_tags=$(xe vm-param-get uuid=${f} param-name=tags 2> /dev/null)
                        if [ $? -eq 0 ] && ([[ ${vm_tags} == *$backup_tag* ]]); then
				add_to_backup_list ${f} 
#echo "${f}"
                        fi
                done
#        else
#echo "${pool_tags}"
	fi
 }


function remove_old_backups
 {
        remove_dir="$backup_directory/$HOSTNAME/$year/$mon"
        for uuid in ${vm_backup_list[@]}; 
        do
                vds=`get_vm_label $uuid`
                vds_quantity=$(find "$remove_dir" -name "$vds-$year-$mon-*" | xargs stat -c "%Y %n" 2>> /dev/null | wc -l)
                if [ $vds_quantity -gt $conserved_vds_quantity ]; then          
                        let "vds_remove_quantity = $vds_quantity - $conserved_vds_quantity"
                        removing_backup="$(find "$remove_dir" -name "$vds-$year-$mon-*" | xargs stat -c "%Y %n" 2>> $log_path | sort -n | head -"$vds_remove_quantity" | cut -d ' ' -f2 )"
                        rm -f $removing_backup
                        for_log=$(echo "removing backup --> $removing_backup" | tr '\n' ' ')
                        log_message "$for_log"
                fi
        done
 }


