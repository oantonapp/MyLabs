function log_enable
{
#	vm_log=()
	log_message ""
	log_message "Starting VM Backup"
	log_message "------------------------------------------"
}
function log_message
{
	`echo "[$(date +%Y-%m-%d_%H-%M-%S)] $1" &>>$log_path`
}
function add_to_backup_list
{
	log_message "Add to backup list: $1"
	vm_backup_list[${#vm_backup_list[@]}]=$1
}

function reset_backup_list
{
	log_message "Reset backup list"
	vm_backup_list=()
}

function get_running_vms
{
	log_message "Get running VMs"
	echo=`xe vm-list power-state=running is-control-domain=false 2>>$log_path`

	if [ $? -ne 0 ]; then
		return 1
	fi

	echo "$echo" | grep "uuid" | awk '{print $NF}'
	return 0
}
function set_running_vms
{
	log_message "Set running VMs"
	reset_backup_list
	running_vms=`get_running_vms`
	if [ $? -ne 0 ]; then
		log_message "get_running_vms failed: $running_vms"
		return 1
	fi
	
	for uuid in $running_vms; do
		add_to_backup_list $uuid
	done
	return 0
}

function backup_vm_list
{
	log_message "Initialise backup of VM list"

	for uuid in ${vm_backup_list[@]}; do

		backup_vm $uuid
		if [ $? -ne 0 ]; then
			log_message "VM $uuid backup failed"
		else
			log_message "VM $uuid backup succeeded"
		fi
	done
}

function backup_vm
{
	log_message "Backup VM $1"

	vm_label=`get_vm_label $1`

	if [ $? -ne 0 ]; then
		log_message "get_vm_label failed: $vm_label"
		return 1
	else
		log_message "get_vm_label succeeded: $vm_label"
	fi

	snapshot_name=$vm_label"_snapshot"
	export_name=$vm_label"-"$date".xva"

	snapshot=`snapshot_vm $1 $snapshot_name`

	if [ $? -ne 0 ]; then
		log_message "snapshot_vm failed: $snapshot"
		return 2
	else
		log_message "snapshot_vm succeeded: $snapshot"
	fi

	remove_template_result=`remove_template $snapshot`

	if [ $? -ne 0 ]; then
		log_message "remove_template failed: $remove_template_result"
		return 3
	else
		log_message "remove_template succeeded: $remove_template_result"
	fi

	disable_ha_result=`disable_ha $snapshot`

	if [ $? -ne 0 ]; then
		log_message "disable_ha failed: $disable_ha_result"
		return 4
	else
		log_message "disable_ha succeeded: $disable_ha_result"
	fi

	export_vm_result=`export_vm $snapshot $export_name`

	if [ $? -ne 0 ]; then
		log_message "export_vm failed: $export_vm_result"
		return 5
	else
		log_message "export_vm succeeded: $export_vm_result"
	fi

	delete_vm_result=`delete_vm $snapshot`

	if [ $? -ne 0 ]; then
		log_message "delete_vm failed: $delete_vm_result"
		return 6
	else
		log_message "delete_vm succeeded: $delete_vm_result"
	fi

	return 0
}

function get_vm_vdi
{
	log_message "Get VDI $1"
	vm_vbds=`get_vm_vbds $1`
	
	if [ $? -ne 0 ]; then
		log_message "get_vm_vbds failed: $vm_vbds"
		return 1
	fi
	
	vdi_uuids=()
	
	for uuid in $vm_vbds; do
	
		log_message "VBD $uuid"
		vbd_type=`get_vbd_type $uuid`
		
		if [ $? -ne 0 ]; then
			log_message "get_vbd_type failed: $vbd_type"
			break
		fi
		
		if [ $vbd_type != "CD" ]; then
			
			vdi_uuid=`get_vbd_vdi_list $uuid`
			
			if [ $? -ne 0 ]; then
				log_message "get_vbd_vdi_list failed: $vdi_uuid"
				break
			else
				log_message "VDI: $vdi_uuid"
			fi
			
			vdi_snapshot=`check_vdi_is_snapshot $vdi_uuid`
			
			if [ $? -ne 0 ]; then
				log_message "check_vdi_is_snapshot failed: $vdi_snapshot"
				break
			fi
			
			log_message "Add VDI to deletion list: $vdi_uuid"
			
			vdi_uuids[${#vdi_uuids[@]}]=$vdi_uuid
			
		else
			log_message "VDI is a CD, skipping: $uuid"
		fi
		
	done
	
	echo ${vdi_uuids[@]}
	return 0
}

function check_vdi_is_snapshot
{
	log_message "Check VDI is a snapshot $1"
	echo=`xe vdi-param-get param-name=is-a-snapshot uuid=$1 2>>$log_path`
	
	if [ $? -ne 0 ]; then
		return 1
	fi
	
	echo "$echo"
	return 0
}

function get_vbd_vdi_list
{
	log_message "Get VBD VDI list $1"
	echo=`xe vdi-list vbd-uuids=$1 2>>$log_path`
	
	if [ $? -ne 0 ]; then
		return 1
	fi
	
	echo "$echo" | grep ^uuid | awk '{print $NF}'
	return 0
}

function get_vbd_type
{
	log_message "Get VBD type $1"
	echo=`xe vbd-param-get param-name=type uuid=$1 2>>$log_path`

	if [ $? -ne 0 ]; then
		return 1
	fi

	echo "$echo"
	return 0
}


